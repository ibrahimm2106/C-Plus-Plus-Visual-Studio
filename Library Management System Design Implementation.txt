#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <stdexcept>
#include <algorithm>
#include <chrono>
#include <ctime>
#include <string>

using namespace std;

class Book {
private:
    string title;
    string author;
    int year;
    string publisher;
    int bookID;
    int totalCopies;
    int availableCopies;
    string subject;

public:
    Book() {}

    // Setter functions
    void setTitle(string t) { title = t; }
    void setAuthor(string a) { author = a; }
    void setYear(int y) { year = y; }
    void setPublisher(string p) { publisher = p; }
    void setBookID(int id) { bookID = id; }
    void setTotalCopies(int total) { totalCopies = total; }
    void setAvailableCopies(int available) { availableCopies = available; }
    void setSubject(string s) { subject = s; }

    // Getter functions
    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    int getYear() const { return year; }
    string getPublisher() const { return publisher; }
    int getBookID() const { return bookID; }
    int getTotalCopies() const { return totalCopies; }
    int getAvailableCopies() const { return availableCopies; }
    string getSubject() const { return subject; }

    // Function to display book details
    void display() const {
        cout << left << setw(25) << "Title: " << title << endl;
        cout << left << setw(25) << "Author: " << author << endl;
        cout << left << setw(25) << "Year: " << year << endl;
        cout << left << setw(25) << "Publisher: " << publisher << endl;
        cout << left << setw(25) << "BookID: " << bookID << endl;
        cout << left << setw(25) << "Total Copies: " << totalCopies << endl;
        cout << left << setw(25) << "Available Copies: " << availableCopies << endl;
        cout << left << setw(25) << "Subject: " << subject << endl;
    }
};

class Library {
private:
    vector<Book> books;
    string booksFile;
    string borrowingFile;
    string returnFile;
    string finesFile;

public:
    Library(string booksFile, string borrowingFile, string returnFile, string finesFile)
        : booksFile(booksFile), borrowingFile(borrowingFile), returnFile(returnFile), finesFile(finesFile) {
        // Create files if they don't exist
        createFile(booksFile);
        createFile(borrowingFile);
        createFile(returnFile);
        createFile(finesFile);
    }

    // Function to create a file if it doesn't exist
    void createFile(const string& filename) {
        ifstream file(filename);
        if (!file.good()) {
            ofstream outfile(filename);
            if (!outfile) {
                cerr << "Error: Unable to create file " << filename << endl;
            }
        }
    }

    // Function to register a book
    void registerBook() {
        Book newBook;
        string input;
        int year, totalCopies, availableCopies;
        cout << "Enter the book's title: ";
        getline(cin, input);
        newBook.setTitle(input);

        cout << "Enter the author's name: ";
        getline(cin, input);
        newBook.setAuthor(input);

        cout << "Enter the publication year: ";
        cin >> year;
        newBook.setYear(year);

        cout << "Enter the publisher: ";
        cin.ignore();
        getline(cin, input);
        newBook.setPublisher(input);

        cout << "Enter the book's ID: ";
        cin >> input; // Allow input of integers or strings
        newBook.setBookID(stoi(input));

        cout << "Enter the total copies: ";
        cin >> totalCopies;
        newBook.setTotalCopies(totalCopies);

        cout << "Enter the available copies: ";
        cin >> availableCopies;
        newBook.setAvailableCopies(availableCopies);

        cout << "Enter the subject: ";
        cin.ignore();
        getline(cin, input);
        newBook.setSubject(input);

        books.push_back(newBook);
        saveBooksToFile(); // Save book details to file
    }

    // Function to search for a book by title
    void searchByTitle(string title) {
        vector<Book>::iterator it;
        for (it = books.begin(); it != books.end(); ++it) {
            if (it->getTitle() == title) {
                cout << "Book found:" << endl;
                it->display();
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    // Function to search for a book by ID
    void searchByID(int id) {
        vector<Book>::iterator it;
        for (it = books.begin(); it != books.end(); ++it) {
            if (it->getBookID() == id) {
                cout << "Book found:" << endl;
                it->display();
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    // Function to borrow a book
    void borrowBook(int bookID) {
        vector<Book>::iterator it;
        for (it = books.begin(); it != books.end(); ++it) {
            if (it->getBookID() == bookID) {
                if (it->getAvailableCopies() > 0) {
                    it->setAvailableCopies(it->getAvailableCopies() - 1);
                    // Add borrowing record to file
                    ofstream outfile(borrowingFile, ios::app);
                    if (outfile.is_open()) {
                        outfile << bookID << "," << getCurrentDate() << endl;
                        outfile.close();
                        cout << "Book borrowed successfully." << endl;
                    }
                    else {
                        cerr << "Unable to open file for writing." << endl;
                    }
                }
                else {
                    cout << "No available copies of the book." << endl;
                }
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    // Function to return a book
    void returnBook(int bookID) {
        vector<Book>::iterator it;
        for (it = books.begin(); it != books.end(); ++it) {
            if (it->getBookID() == bookID) {
                it->setAvailableCopies(it->getAvailableCopies() + 1);
                // Add return record to file
                ofstream outfile(returnFile, ios::app);
                if (outfile.is_open()) {
                    outfile << bookID << "," << getCurrentDate() << endl;
                    outfile.close();
                    cout << "Book returned successfully." << endl;
                }
                else {
                    cerr << "Unable to open file for writing." << endl;
                }
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    // Function to calculate fines
    void calculateFines(int bookID, string returnDate) {
        vector<Book>::iterator it;
        for (it = books.begin(); it != books.end(); ++it) {
            if (it->getBookID() == bookID) {
                // Get current date
                string currentDate = getCurrentDate();

                // Convert dates to tm structs
                tm t1 = {}, t2 = {};
                istringstream ss1(currentDate), ss2(returnDate);
                ss1 >> get_time(&t1, "%Y-%m-%d");
                ss2 >> get_time(&t2, "%Y-%m-%d");

                // Convert tm structs to time_t
                time_t time1 = mktime(&t1);
                time_t time2 = mktime(&t2);

                // Calculate difference in seconds
                double difference = difftime(time1, time2);

                // Calculate difference in days
                int daysDifference = static_cast<int>(difference) / (60 * 60 * 24);

                // Calculate fines if the book is overdue
                double fineAmount = 0.0;
                if (daysDifference > 14) {
                    fineAmount = (daysDifference - 14) * 20.0; // 20P per day of extension
                }

                // Add fine record to file
                ofstream outfile(finesFile, ios::app);
                if (outfile.is_open()) {
                    outfile << bookID << "," << currentDate << "," << fineAmount << endl;
                    outfile.close();
                }
                else {
                    cerr << "Unable to open file for writing." << endl;
                }
                return;
            }
        }
        cout << "Book not found." << endl;
    }

    // Function to get current date in YYYY-MM-DD format
    string getCurrentDate() const {
        auto now = chrono::system_clock::now();
        time_t now_time = chrono::system_clock::to_time_t(now);
        struct tm timeinfo;
        localtime_s(&timeinfo, &now_time);
        char buffer[80];
        strftime(buffer, sizeof(buffer), "%Y-%m-%d", &timeinfo);
        return string(buffer);
    }

    // Function to save book details to a file
    void saveBooksToFile() {
        ofstream outfile(booksFile);
        if (outfile.is_open()) {
            for (const auto& book : books) {
                outfile << book.getTitle() << "," << book.getAuthor() << "," << book.getYear() << "," << book.getPublisher() << "," << book.getBookID() << "," << book.getTotalCopies() << "," << book.getAvailableCopies() << "," << book.getSubject() << endl;
            }
            outfile.close();
        }
        else {
            cerr << "Unable to open file for writing." << endl;
        }
    }
};

// Function to validate if input is an integer
bool isInteger(const string& s) {
    if (s.empty() || ((!isdigit(s[0])) && (s[0] != '-') && (s[0] != '+'))) return false;
    char* p;
    strtol(s.c_str(), &p, 10);
    return (*p == 0);
}

int main() {
    Library library("C:\\Users\\ibrahimm23\\Documents\\books.csv", "C:\\Users\\ibrahimm23\\Documents\\borrowing_records.csv", "C:\\Users\\ibrahimm23\\Documents\\return_records.csv", "C:\\Users\\ibrahimm23\\Documents\\fines.csv");

    int choice;
    do {
        cout << "Menu:" << endl;
        cout << "1. Register new book" << endl;
        cout << "2. Search for a book" << endl;
        cout << "3. Borrow a book" << endl;
        cout << "4. Return a book" << endl;
        cout << "5. Calculate fines" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            library.registerBook();
            break;
        case 2:
        {
            string title;
            cout << "Enter book title to search: ";
            cin.ignore();
            getline(cin, title);
            library.searchByTitle(title);
        }
        break;
        case 3:
        {
            int input;
            cout << "Enter book ID to borrow: ";
            cin >> input;
            library.borrowBook(input);
        }
        break;
        case 4:
        {
            int input;
            cout << "Enter book ID to return: ";
            cin >> input;
            library.returnBook(input);
        }
        break;
        case 5:
        {
            int inputID;
            string inputDate;
            cout << "Enter book ID: ";
            cin >> inputID;
            cout << "Enter return date (YYYY-MM-DD): ";
            cin >> inputDate;
            library.calculateFines(inputID, inputDate);
        }
        break;
        case 6:
            cout << "Exiting program." << endl;
            break;
        default:
            cout << "Invalid choice. Please enter a number between 1 and 6." << endl;
            break;
        }
    } while (choice != 6);

    return 0;
}
